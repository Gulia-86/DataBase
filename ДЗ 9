-- Практическое задание по теме “Транзакции, переменные, представления”
-- 1.	В базе данных shop и sample присутствуют одни и те же таблицы, учебной базы данных. 
-- Переместите запись id = 1 из таблицы shop.users в таблицу sample.users. Используйте транзакции.

start transaction;
insert into sample.users select * from shop.users where id = 1; 
delete from shop.users where id = 1;
commit;
select * from shop.users;
select * from sample.users;

-- 2.	Создайте представление, которое выводит название name товарной позиции из таблицы products и соответствующее название каталога name из таблицы catalogs.

CREATE VIEW cat as SELECT
  p.id,
  p.name,
  p.price,
  c.name AS catalog
FROM
  products AS p
LEFT JOIN
  catalogs AS c
ON
  p.catalog_id = c.id;
select * from cat;

-- Практическое задание по теме “Администрирование MySQL” 
-- 1.	Создайте двух пользователей которые имеют доступ к базе данных shop. Первому пользователю shop_read должны быть доступны только запросы на чтение данных, 
-- второму пользователю shop — любые операции в пределах базы данных shop.


CREATE USER shop_read@shop;
CREATE USER shop@shop;
SELECT Host, User FROM mysql.user;
GRANT select ON shop.* TO shop@shop_read;
GRANT ALL ON  shop.* TO shop@shop;


-- 2.	(по желанию) Пусть имеется таблица accounts содержащая три столбца id, name, password, содержащие первичный ключ, имя пользователя и его пароль. 
-- Создайте представление username таблицы accounts, предоставляющий доступ к столбца id и name. 
-- Создайте пользователя user_read, который бы не имел доступа к таблице accounts, однако, мог бы извлекать записи из представления username.


create table shop.accounts2 (
  id int(10) unsigned,
  `name` VARCHAR(255),
  `password` VARCHAR(255), 
  PRIMARY KEY (`id`) )
ENGINE = InnoDB;

CREATE VIEW username as 
	select 	id, name FROM accounts2;
select * from username;

CREATE USER user_read@accounts2;
GRANT select ON accounts2.* TO user_read@accounts2;


-- Практическое задание по теме “Хранимые процедуры и функции, триггеры"
-- 1.	Создайте хранимую функцию hello(), которая будет возвращать приветствие, в зависимости от текущего времени суток. 
-- С 6:00 до 12:00 функция должна возвращать фразу "Доброе утро", с 12:00 до 18:00 функция должна возвращать фразу "Добрый день", с 18:00 до 00:00 — "Добрый вечер", с 00:00 до 6:00 — "Доброй ночи".
select CURTIME();	

delimiter //

DROP FUNCTION IF EXISTS hello// 
CREATE FUNCTION  hello ()
returns VARCHAR(255) DETERMINISTIC
begin
  set @tim = CURTIME();
 -- Почему это не работает?
  CASE @tim
	WHEN @tim BETWEEN '06:00:00' and '12:00:00' then
	RETURN 'Доброе утро';
	WHEN @tim BETWEEN '12:00:00' and '18:00:00' then
	RETURN 'Добрый день';
	WHEN @tim BETWEEN '18:00:00' and '00:00:00' then
	RETURN 'Добрый вечер';
	WHEN @tim BETWEEN '00:00:00' and '06:00:00' then
	RETURN 'Доброй ночи';
	ELSE
  	RETURN @tim;
  END CASE;
end//
select hello() //

-- 2.	В таблице products есть два текстовых поля: name с названием товара и description с его описанием. 
-- Допустимо присутствие обоих полей или одно из них. Ситуация, когда оба поля принимают неопределенное значение NULL неприемлема. 
-- Используя триггеры, добейтесь того, чтобы одно из этих полей или оба поля были заполнены. При попытке присвоить полям NULL-значение необходимо отменить операцию.

DROP trigger IF EXISTS check_name_update//
CREATE TRIGGER check_name_update BEFORE UPDATE ON shop.products
FOR EACH ROW
BEGIN
IF new.name <=> new.description THEN
   SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Оба поля не могут быть пустыми';	
end if;
END//

update products
SET name = NULL
WHERE id = 8// 
update products
SET description = 'dsfsdfsdf', name = 'dsfsf'
WHERE id = 8//
select * from products//

-- 3.	(по желанию) Напишите хранимую функцию для вычисления произвольного числа Фибоначчи. Числами Фибоначчи называется последовательность в которой число равно сумме двух предыдущих чисел. 
-- Вызов функции FIBONACCI(10) должен возвращать число 55.

DROP FUNCTION IF EXISTS FIBONACCI// 
CREATE FUNCTION  FIBONACCI (num INT)
returns int DETERMINISTIC
begin
	declare fib1 int default 1;
    declare fib2 int default 1;
    declare i int default 0;
    declare fib_sum int;
	IF (num > 0 and num <100) THEN
		cycle : while (i < num - 2) do
			set fib_sum = fib1 + fib2;
			set fib1 = fib2;
			set fib2 = fib_sum;
			set i = i + 1;
		END WHILE cycle;
	  ELSE set fib2 = 0;
    END IF;
	RETURN fib2;
END//

select FIBONACCI(10)//



